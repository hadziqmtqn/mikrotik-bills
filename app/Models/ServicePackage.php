<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Attributes\Scope;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Casts\Attribute;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Support\Str;
use Spatie\MediaLibrary\HasMedia;
use Spatie\MediaLibrary\InteractsWithMedia;

class ServicePackage extends Model implements HasMedia
{
    use SoftDeletes, InteractsWithMedia;

    protected $fillable = [
        'slug',
        'serial_number',
        'code',
        'service_type',
        'package_name',
        'payment_type',
        'plan_type',
        'package_limit_type',
        'limit_type',
        'time_limit',
        'time_limit_unit',
        'data_limit',
        'data_limit_unit',
        'validity_period',
        'validity_unit',
        'package_price',
        'price_before_discount',
        'router_id',
        'description',
        'is_active',
    ];

    protected function casts(): array
    {
        return [
            'slug' => 'string',
            'is_active' => 'boolean',
        ];
    }

    protected static function boot(): void
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::creating(function (ServicePackage $servicePackage) {
            $servicePackage->slug = Str::uuid()->toString();
            $servicePackage->serial_number = self::max('serial_number') + 1;
            $servicePackage->code = ($servicePackage->service_type === 'pppoe' ? 'PP' : 'HS') . Str::padLeft($servicePackage->serial_number, 6, '0');
        });
    }

    public function router(): BelongsTo
    {
        return $this->belongsTo(Router::class);
    }

    // TODO More
    public function getRouteKeyName(): string
    {
        return 'slug';
    }

    // TODO Attributes
    protected function limitValue(): Attribute
    {
        $timeLimit = $this->time_limit ? ($this->time_limit . ' ' . $this->time_limit_unit) : '';
        $dataLimit = $this->data_limit ? ($this->data_limit . ' ' . $this->data_limit_unit) : '';

        return Attribute::make(
            get: fn() => trim($timeLimit . ($timeLimit && $dataLimit ? ' & ' : '') . $dataLimit)
        );
    }

    // TODO Scopes
    #[Scope]
    protected function planType(Builder $query, $planType): Builder
    {
        return $query->where('plan_type', $planType);
    }

    #[Scope]
    protected function active(Builder $query): Builder
    {
        return $query->where('is_active', true);
    }
}
