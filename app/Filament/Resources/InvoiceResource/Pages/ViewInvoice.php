<?php

namespace App\Filament\Resources\InvoiceResource\Pages;

use App\Enums\AccountType;
use App\Enums\PackageTypeService;
use App\Enums\StatusData;
use App\Filament\Resources\CustomerServiceResource;
use App\Filament\Resources\InvoiceResource;
use App\Filament\Resources\UserResource;
use App\Helpers\DateHelper;
use App\Models\Application;
use App\Models\CustomerService;
use App\Models\Invoice;
use Filament\Infolists\Components\Group;
use Filament\Infolists\Components\RepeatableEntry;
use Filament\Infolists\Components\Section;
use Filament\Infolists\Components\TextEntry;
use Filament\Infolists\Infolist;
use Filament\Resources\Pages\ViewRecord;
use Filament\Support\Enums\FontWeight;
use Filament\Support\Enums\IconPosition;
use Illuminate\Contracts\View\View;
use Torgodly\Html2Media\Actions\Html2MediaAction;

class ViewInvoice extends ViewRecord
{
    protected static string $resource = InvoiceResource::class;

    protected function getActions(): array
    {
        return [
            Html2MediaAction::make('export')
                ->label('Cetak')
                ->icon('heroicon-o-printer')
                ->color('primary')
                ->modalHeading('Cetak Invoice')
                ->modalDescription('Apakah Anda yakin ingin mencetak invoice ini?')
                ->successNotificationTitle('Invoice berhasil dicetak.')
                ->savePdf()
                ->content(
                    fn(Invoice $record): View => view('filament.resources.invoice-resource.pages.print', [
                        'invoice' => $record->loadMissing('user:id,name,email', 'user.userProfile', 'invoiceItems.customerService.servicePackage'),
                        'application' => Application::first()
                    ])
                )
                ->filename(fn(Invoice $record): string => 'invoice-' . $record->code . '-' . DateHelper::indonesiaDate($record->date) . '.pdf')
        ];
    }

    public function infolist(Infolist $infolist): Infolist
    {
        parent::infolist($infolist); // TODO: Change the autogenerated stub

        return $infolist
            ->columns(3)
            ->schema([
                Group::make()
                    ->columnSpan(['lg' => 2])
                    ->schema([
                        Section::make('Data Pelanggan')
                            ->inlineLabel()
                            ->schema([
                                TextEntry::make('user.name')
                                    ->label('Nama')
                                    ->color('primary')
                                    ->icon('heroicon-o-arrow-top-right-on-square')
                                    ->iconPosition(IconPosition::After)
                                    ->url(fn(Invoice $record): string => UserResource::getUrl('view', ['record' => $record->user?->username])),

                                TextEntry::make('user.userProfile.account_type')
                                    ->label('Tipe')
                                    ->formatStateUsing(fn($state): string => AccountType::tryFrom($state)?->getLabel() ?? '-'),

                                TextEntry::make('user.userProfile.place_name')
                                    ->label('Tempat Usaha'),

                                TextEntry::make('user.userProfile.whatsapp_number')
                                    ->label('No. WhatsApp'),
                            ]),

                        Section::make('Items')
                            ->schema([
                                RepeatableEntry::make('invoiceItems')
                                    ->hiddenLabel()
                                    ->schema([
                                        TextEntry::make('customerService.reference_number')
                                            ->label('No. Referensi')
                                            ->inlineLabel()
                                            ->icon('heroicon-o-arrow-top-right-on-square')
                                            ->iconPosition(IconPosition::After)
                                            ->color('primary')
                                            ->url(function ($state): string {
                                                $customerService = CustomerService::filterByReferenceNumber($state)
                                                    ->first();

                                                return $customerService ? CustomerServiceResource::getUrl('view', ['record' => $customerService->slug]) : '';
                                            }),

                                        TextEntry::make('customerService.servicePackage.package_name')
                                            ->label('Paket Layanan')
                                            ->inlineLabel(),

                                        TextEntry::make('customerService.package_type')
                                            ->label('Tipe Paket')
                                            ->inlineLabel()
                                            ->formatStateUsing(fn($state): string => PackageTypeService::tryFrom($state)?->getLabel() ?? '-'),

                                        TextEntry::make('customerService.price')
                                            ->label('Harga')
                                            ->inlineLabel()
                                            ->money('idr')
                                            ->weight(FontWeight::Bold)
                                    ])
                            ])
                    ]),

                Group::make()
                    ->columnSpan(['lg' => 1])
                    ->schema([
                        Section::make()
                            ->inlineLabel()
                            ->schema([
                                TextEntry::make('date')
                                    ->label('Tanggal')
                                    ->formatStateUsing(fn($state): string => DateHelper::indonesiaDate($state)),

                                TextEntry::make('due_date')
                                    ->label('Jatuh Tempo')
                                    ->formatStateUsing(fn($state): string => DateHelper::indonesiaDate($state))
                                    ->color('danger'),

                                TextEntry::make('cancel_date')
                                    ->label('Tanggal Batal')
                                    ->formatStateUsing(fn($state): string => DateHelper::indonesiaDate($state))
                                    ->color('danger')
                                    ->hidden(fn(Invoice $record): bool => !$record->cancel_date),

                                TextEntry::make('status')
                                    ->weight(FontWeight::Bold)
                                    ->size(TextEntry\TextEntrySize::Large)
                                    ->color(fn($state): string => StatusData::tryFrom($state)?->getColor() ?? 'gray')
                                    ->formatStateUsing(fn($state): string => StatusData::tryFrom($state)?->getLabel() ?? '-'),
                            ])
                    ]),
            ]);
    }
}
